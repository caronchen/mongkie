/*
 * This file is part of MONGKIE. Visit <http://www.mongkie.org/> for details.
 * Copyright (C) 2011 Korean Bioinformation Center(KOBIC)
 * 
 * MONGKIE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * MONGKIE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.mongkie.ui.enrichment;

import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.*;
import org.jdesktop.swingx.JXBusyLabel;
import org.mongkie.enrichment.EnrichmentController;
import org.mongkie.enrichment.EnrichmentResultUI;
import org.mongkie.enrichment.spi.EnrichedResultUI;
import org.mongkie.enrichment.spi.EnrichedTerm;
import org.mongkie.enrichment.spi.EnrichmentResultUISupport;
import org.mongkie.util.GlobalLookup;
import static org.mongkie.visualization.Config.MODE_DATATABLE;
import static org.mongkie.visualization.Config.ROLE_NETWORK;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.Actions;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.mongkie.ui.enrichment//EnrichmentResult//EN",
autostore = false)
@TopComponent.Description(preferredID = "EnrichmentResultTopComponent",
iconBase = "org/mongkie/ui/enrichment/resources/result.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = MODE_DATATABLE, openAtStartup = false, roles = ROLE_NETWORK, position = 200)
@ActionID(category = "Window", id = "org.mongkie.ui.enrichment.EnrichmentResultTopComponent")
@ActionReference(path = "Menu/Window", position = 80)
@TopComponent.OpenActionRegistration(displayName = "#CTL_EnrichmentResultAction",
preferredID = "EnrichmentResultTopComponent")
public final class EnrichmentResultTopComponent extends TopComponent implements ExplorerManager.Provider, EnrichmentResultUI {

    private JXBusyLabel analyzing;
    private final ExplorerManager em = new ExplorerManager();

    public EnrichmentResultTopComponent() {
        initComponents();
        analyzing = new JXBusyLabel(new Dimension(20, 20));
        analyzing.setText(NbBundle.getMessage(EnrichmentResultTopComponent.class, "EnrichmentResultTopComponent.analyzing.text"));
        analyzing.setHorizontalAlignment(SwingConstants.CENTER);

        setName(NbBundle.getMessage(EnrichmentResultTopComponent.class, "CTL_EnrichmentResultTopComponent"));
        setToolTipText(NbBundle.getMessage(EnrichmentResultTopComponent.class, "HINT_EnrichmentResultTopComponent"));

        associateLookup(new ProxyLookup(ExplorerUtils.createLookup(em, getActionMap()), GlobalLookup.getDefault()));

        for (Action a : Utilities.actionsForPath("EnrichmentAnalysis/Result/Actions")) {
            JButton button = new JButton();
            Actions.connect(button, a);
            button.setMargin(new java.awt.Insets(-2, -2, -2, -2));
            button.setFocusPainted(false);
            button.setFocusable(false);
            resultToolBar.add(button);
        }
        resultToolBar.add(new JSeparator());
        resultToolBar.add(ungroupAllButton);
        resultToolBar.add(selectAllButton);
        resultToolBar.add(selectNoneButton);
        resultToolBar.add(Box.createHorizontalGlue());
        resultToolBar.add(reportButton);
    }

    static EnrichmentResultTopComponent getInstance() {
        if (instance == null) {
            instance = (EnrichmentResultTopComponent) WindowManager.getDefault().findTopComponent("EnrichmentResultTopComponent");
        }
        return instance;
    }
    private static EnrichmentResultTopComponent instance;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The lookupContent of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportButton = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        selectNoneButton = new javax.swing.JButton();
        ungroupAllButton = new javax.swing.JButton();
        resultDisplayPanel = new javax.swing.JPanel();
        resultToolBar = new javax.swing.JToolBar();

        reportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mongkie/ui/enrichment/resources/report.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(reportButton, org.openide.util.NbBundle.getMessage(EnrichmentResultTopComponent.class, "EnrichmentResultTopComponent.reportButton.text")); // NOI18N
        reportButton.setToolTipText(org.openide.util.NbBundle.getMessage(EnrichmentResultTopComponent.class, "EnrichmentResultTopComponent.reportButton.toolTipText")); // NOI18N
        reportButton.setEnabled(false);
        reportButton.setFocusPainted(false);
        reportButton.setFocusable(false);
        reportButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reportButton.setMargin(new java.awt.Insets(-2, -2, -2, -2));
        reportButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        selectAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mongkie/ui/enrichment/resources/selectAll.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(selectAllButton, org.openide.util.NbBundle.getMessage(EnrichmentResultTopComponent.class, "EnrichmentResultTopComponent.selectAllButton.text")); // NOI18N
        selectAllButton.setToolTipText(org.openide.util.NbBundle.getMessage(EnrichmentResultTopComponent.class, "EnrichmentResultTopComponent.selectAllButton.toolTipText")); // NOI18N
        selectAllButton.setEnabled(false);
        selectAllButton.setFocusPainted(false);
        selectAllButton.setFocusable(false);
        selectAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectAllButton.setMargin(new java.awt.Insets(-2, -2, -2, -2));
        selectAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        selectNoneButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mongkie/ui/enrichment/resources/selectNone.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(selectNoneButton, org.openide.util.NbBundle.getMessage(EnrichmentResultTopComponent.class, "EnrichmentResultTopComponent.selectNoneButton.text")); // NOI18N
        selectNoneButton.setToolTipText(org.openide.util.NbBundle.getMessage(EnrichmentResultTopComponent.class, "EnrichmentResultTopComponent.selectNoneButton.toolTipText")); // NOI18N
        selectNoneButton.setEnabled(false);
        selectNoneButton.setFocusPainted(false);
        selectNoneButton.setFocusable(false);
        selectNoneButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectNoneButton.setMargin(new java.awt.Insets(-2, -2, -2, -2));
        selectNoneButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectNoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectNoneButtonActionPerformed(evt);
            }
        });

        ungroupAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mongkie/ui/enrichment/resources/ungroupAll.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(ungroupAllButton, org.openide.util.NbBundle.getMessage(EnrichmentResultTopComponent.class, "EnrichmentResultTopComponent.ungroupAllButton.text")); // NOI18N
        ungroupAllButton.setToolTipText(org.openide.util.NbBundle.getMessage(EnrichmentResultTopComponent.class, "EnrichmentResultTopComponent.ungroupAllButton.toolTipText")); // NOI18N
        ungroupAllButton.setEnabled(false);
        ungroupAllButton.setFocusPainted(false);
        ungroupAllButton.setFocusable(false);
        ungroupAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ungroupAllButton.setMargin(new java.awt.Insets(-2, -2, -2, -2));
        ungroupAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ungroupAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ungroupAllButtonActionPerformed(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        resultDisplayPanel.setBorder(null);
        resultDisplayPanel.setLayout(new java.awt.BorderLayout());
        add(resultDisplayPanel, java.awt.BorderLayout.CENTER);

        resultToolBar.setRollover(true);
        add(resultToolBar, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        getResultUISupport().selectAll();
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void selectNoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectNoneButtonActionPerformed
        getResultUISupport().selectNone();
    }//GEN-LAST:event_selectNoneButtonActionPerformed

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        diplayReport();
    }//GEN-LAST:event_reportButtonActionPerformed

    private void ungroupAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ungroupAllButtonActionPerformed
        for (EnrichedTerm term : getResult().getAllTerms()) {
            Lookup.getDefault().lookup(EnrichmentController.class).ungroup(term);
        }
    }//GEN-LAST:event_ungroupAllButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton reportButton;
    private javax.swing.JPanel resultDisplayPanel;
    private javax.swing.JToolBar resultToolBar;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton selectNoneButton;
    private javax.swing.JButton ungroupAllButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    void setBusy(boolean busy) {
        analyzing.setBusy(busy);
        if (busy && !isAncestorOf(analyzing)) {
            resultDisplayPanel.removeAll();
            resultDisplayPanel.add(analyzing, BorderLayout.CENTER);
            resultDisplayPanel.revalidate();
            resultDisplayPanel.repaint();
        } else if (!busy && isAncestorOf(analyzing)) {
            resultDisplayPanel.remove(analyzing);
            resultDisplayPanel.revalidate();
            resultDisplayPanel.repaint();
        }
        refreshToolBar();
    }

    void setResult(EnrichedResultUI result) {
        this.result = result;
        setBusy(false);
        resultDisplayPanel.removeAll();
        if (result != null) {
            resultDisplayPanel.add(result.getPanel(), BorderLayout.CENTER);
            setLookupContents(result.getSelectedTerms());
        } else {
            setLookupContents();
        }
        resultDisplayPanel.revalidate();
        resultDisplayPanel.repaint();
    }
    private EnrichedResultUI result;

    private void refreshToolBar() {
        ungroupAllButton.setEnabled(isValidResult());
        EnrichmentResultUISupport support = getResultUISupport();
        selectAllButton.setEnabled(support != null);
        selectNoneButton.setEnabled(support != null);
        reportButton.setEnabled(support != null && support.getReportPanel() != null);
        if (!isValidResult()) {
            setLookupContents();
        }
    }

    @Override
    public boolean isValidResult() {
        return !isBusy() && result != null;
    }

    @Override
    public EnrichmentResultUISupport getResultUISupport() {
        return (isValidResult() && result instanceof EnrichmentResultUISupport) ? (EnrichmentResultUISupport) result : null;
    }

    @Override
    public boolean isBusy() {
        return analyzing.isBusy();
    }

    @Override
    public EnrichedResultUI getResult() {
        return result;
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void setLookupContents(EnrichedTerm... terms) {
        GlobalLookup.getDefault().set(EnrichedTerm.class, terms);
    }

    @Override
    public void touchLookupContents() {
        if (isValidResult()) {
            GlobalLookup.getDefault().set(EnrichedTerm.class, result.getSelectedTerms());
        }
    }

    private void diplayReport() {
        NotifyDescriptor reportDescriptor = new NotifyDescriptor.Message(getResultUISupport().getReportPanel(), NotifyDescriptor.PLAIN_MESSAGE);
        reportDescriptor.setTitle("Enrichment Report");
        DialogDisplayer.getDefault().notify(reportDescriptor);
    }

    @Override
    public Action[] getContextActions() {
        return Utilities.actionsForPath("EnrichmentAnalysis/Result/Actions").toArray(new Action[]{});
    }
}
