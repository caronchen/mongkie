/*
 * This file is part of MONGKIE. Visit <http://www.mongkie.org/> for details.
 * Copyright (C) 2011 Korean Bioinformation Center(KOBIC)
 * 
 * MONGKIE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * MONGKIE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * GoEnrichmentSettingUI.java
 *
 * Created on Jun 21, 2011, 5:16:48 PM
 */
package org.mongkie.ui.enrichment.go;

import gobean.calculation.EnrichmentMethod;
import gobean.statistics.MultipleTestCorrectionMethod;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.mongkie.enrichment.go.GoEnrichment;
import org.mongkie.enrichment.spi.EnrichmentBuilder;

/**
 *
 * @author Yeongjun Jang <yjjang@kribb.re.kr>
 */
public class GoEnrichmentSettingUI extends javax.swing.JPanel
        implements EnrichmentBuilder.SettingUI<GoEnrichment> {

    /** Creates new form GoEnrichmentSettingUI */
    public GoEnrichmentSettingUI() {
        initComponents();
        
        DefaultComboBoxModel strategyModel = new DefaultComboBoxModel();
        for (EnrichmentMethod strategy : EnrichmentMethod.values()) {
            strategyModel.addElement(strategy);
        }
        strategyComboBox.setModel(strategyModel);
        DefaultComboBoxModel correctionModel = new DefaultComboBoxModel();
        for (MultipleTestCorrectionMethod correction : MultipleTestCorrectionMethod.getSupportedMethods()) {
            correctionModel.addElement(correction);
        }
        correctionComboBox.setModel(correctionModel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        strategeLabel = new javax.swing.JLabel();
        strategyComboBox = new javax.swing.JComboBox();
        correctionComboBox = new javax.swing.JComboBox();
        correctionLabel = new javax.swing.JLabel();
        pvalueLabel = new javax.swing.JLabel();
        pvalueSpinner = new javax.swing.JSpinner();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        strategeLabel.setText(org.openide.util.NbBundle.getMessage(GoEnrichmentSettingUI.class, "GoEnrichmentSettingUI.strategeLabel.text")); // NOI18N

        strategyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Classic" }));

        correctionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));

        correctionLabel.setText(org.openide.util.NbBundle.getMessage(GoEnrichmentSettingUI.class, "GoEnrichmentSettingUI.correctionLabel.text")); // NOI18N

        pvalueLabel.setText(org.openide.util.NbBundle.getMessage(GoEnrichmentSettingUI.class, "GoEnrichmentSettingUI.pvalueLabel.text")); // NOI18N

        pvalueSpinner.setModel(new javax.swing.SpinnerNumberModel(0.01d, 0.0d, 1.0d, 0.0050d));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(correctionLabel)
                    .addComponent(pvalueLabel)
                    .addComponent(strategeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(pvalueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addComponent(strategyComboBox, 0, 0, Short.MAX_VALUE)
                    .addComponent(correctionComboBox, 0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(strategyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(strategeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(correctionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(correctionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(pvalueSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pvalueLabel)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox correctionComboBox;
    private javax.swing.JLabel correctionLabel;
    private javax.swing.JLabel pvalueLabel;
    private javax.swing.JSpinner pvalueSpinner;
    private javax.swing.JLabel strategeLabel;
    private javax.swing.JComboBox strategyComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public JPanel getPanel() {
        return this;
    }
    
    @Override
    public void setup(GoEnrichment e) {
        strategyComboBox.setSelectedItem(e.getStrategy());
        correctionComboBox.setSelectedItem(e.getCorrection());
        pvalueSpinner.getModel().setValue(e.getMaxP());
    }
    
    @Override
    public void apply(GoEnrichment e) {
        e.setStrategy((EnrichmentMethod) strategyComboBox.getSelectedItem());
        e.setCorrection((MultipleTestCorrectionMethod) correctionComboBox.getSelectedItem());
        e.setMaxP((Double) pvalueSpinner.getModel().getValue());
    }
    
    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        correctionComboBox.setEnabled(enabled);
        strategyComboBox.setEnabled(enabled);
        pvalueSpinner.setEnabled(enabled);
    }
}
