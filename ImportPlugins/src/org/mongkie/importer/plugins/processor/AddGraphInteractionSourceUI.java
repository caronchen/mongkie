/*
 * This file is part of MONGKIE. Visit <http://www.mongkie.org/> for details.
 * Visit <http://www.mongkie.org> for details about MONGKIE.
 * Copyright (C) 2012 Korean Bioinformation Center (KOBIC)
 *
 * MONGKIE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MONGKIE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.mongkie.importer.plugins.processor;

import javax.swing.JPanel;
import org.mongkie.im.InteractionController;
import org.mongkie.importer.GraphContainer;
import org.mongkie.importer.spi.Processor;
import org.netbeans.validation.api.AbstractValidator;
import org.netbeans.validation.api.Problems;
import org.netbeans.validation.api.builtin.stringvalidation.StringValidators;
import org.netbeans.validation.api.ui.ValidationGroup;
import org.netbeans.validation.api.ui.swing.ValidationPanel;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import prefuse.data.Table;

/**
 *
 * @author Yeongjun Jang <yjjang@kribb.re.kr>
 */
@ServiceProvider(service = Processor.UI.class)
public class AddGraphInteractionSourceUI extends javax.swing.JPanel
        implements Processor.UI<GraphContainer, AddGraphInteractionSource> {

    private ValidationPanel vp;

    /**
     * Creates new form AddGraphInteractionSourceUI
     */
    public AddGraphInteractionSourceUI() {
        initComponents();
    }

    @Override
    public void load(AddGraphInteractionSource processor) {
        sourceNameTextField.setText(processor.getName());
        keyColComboBox.removeAllItems();
        Table t = processor.getContainer().getGraph().getNodeTable();
        for (int i = 0; i < t.getColumnCount(); i++) {
            keyColComboBox.addItem(t.getColumnName(i));
        }
        keyColComboBox.setSelectedItem(processor.getNodeKeyCol());
    }

    @Override
    public void apply(AddGraphInteractionSource processor) {
        processor.setName(sourceNameTextField.getText());
        processor.setNodeKeyCol((String) keyColComboBox.getSelectedItem());
    }

    @Override
    public JPanel getPanel() {
        if (vp == null) {
            vp = new ValidationPanel();
            vp.setInnerComponent(AddGraphInteractionSourceUI.this);
            ValidationGroup validationGroup = vp.getValidationGroup();
            validationGroup.add(sourceNameTextField, StringValidators.REQUIRE_NON_EMPTY_STRING,
                    new AbstractValidator<String>(String.class) {
                        @Override
                        public void validate(Problems problems, String compName, String model) {
                            if (Lookup.getDefault().lookup(InteractionController.class).getInteractionSource(model) != null) {
                                problems.add("The source name is already registered.");
                            }
                        }
                    });
            validationGroup.add(keyColComboBox, new AbstractValidator<String>(String.class) {
                @Override
                public void validate(Problems problems, String compName, String model) {
                    if (model == null || model.isEmpty()) {
                        problems.add("Key column must be selected.");
                    }
                }
            });
        }
        return vp;
    }

    @Override
    public String getTitle() {
        return "Add an interaction source";
    }

    @Override
    public boolean isUIForProcessor(Processor processor) {
        return processor instanceof AddGraphInteractionSource;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourceNameLabel = new javax.swing.JLabel();
        sourceNameTextField = new javax.swing.JTextField();
        keyColLabel = new javax.swing.JLabel();
        keyColComboBox = new javax.swing.JComboBox();

        org.openide.awt.Mnemonics.setLocalizedText(sourceNameLabel, org.openide.util.NbBundle.getMessage(AddGraphInteractionSourceUI.class, "AddGraphInteractionSourceUI.sourceNameLabel.text")); // NOI18N

        sourceNameTextField.setText(org.openide.util.NbBundle.getMessage(AddGraphInteractionSourceUI.class, "AddGraphInteractionSourceUI.Source name.text")); // NOI18N
        sourceNameTextField.setName("Source name"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(keyColLabel, org.openide.util.NbBundle.getMessage(AddGraphInteractionSourceUI.class, "AddGraphInteractionSourceUI.keyColLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceNameLabel)
                    .addComponent(keyColLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sourceNameTextField)
                    .addComponent(keyColComboBox, 0, 140, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceNameLabel)
                    .addComponent(sourceNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyColLabel)
                    .addComponent(keyColComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox keyColComboBox;
    private javax.swing.JLabel keyColLabel;
    private javax.swing.JLabel sourceNameLabel;
    private javax.swing.JTextField sourceNameTextField;
    // End of variables declaration//GEN-END:variables
}
