/*
 * This file is part of MONGKIE. Visit <http://www.mongkie.org/> for details.
 * Copyright (C) 2011 Korean Bioinformation Center(KOBIC)
 * 
 * MONGKIE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * MONGKIE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.mongkie.ui.importer.csv;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableColumn;
import org.netbeans.validation.api.ui.ValidationGroup;
import org.openide.util.NbBundle;

/**
 * 
 * @author Yeongjun Jang <yjjang@kribb.re.kr>
 */
class ImportCSVNodeTableInnerPanel extends ImportCSVInnerPanel {

    /** Creates new form ImportCSVNodeTableInnerPanel */
    ImportCSVNodeTableInnerPanel(ImportCSVNodeTableWizardPanel wizardPanel) {
        super(wizardPanel);
    }

    @Override
    protected void initUI() {
        initComponents();
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(ImportCSVNodeTableInnerPanel.class, "ImportCSVNodeTableInnerPanel.displayName");
    }

    @Override
    protected JButton getFileButton() {
        return fileButton;
    }

    @Override
    protected JTextField getPathTextField() {
        return pathTextField;
    }

    @Override
    protected JScrollPane getPreviewScroll() {
        return previewScroll;
    }

    @Override
    protected JTable getPreviewTable() {
        return previewTable;
    }

    @Override
    protected JCheckBox getSkipCheckBox() {
        return skipNodeTableCheckBox;
    }

    @Override
    protected JCheckBox getHasHeaderCheckBox() {
        return hasHeaderCheckBox;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descriptionLabel = new javax.swing.JLabel();
        pathTextField = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        labelColumnLabel = new javax.swing.JLabel();
        labelColumnComboBox = new javax.swing.JComboBox();
        previewScroll = new javax.swing.JScrollPane();
        previewTable = new javax.swing.JTable();
        idColumnLabel = new javax.swing.JLabel();
        idColumnComboBox = new javax.swing.JComboBox();
        previewSeparator = new org.jdesktop.swingx.JXTitledSeparator();
        skipNodeTableCheckBox = new javax.swing.JCheckBox();
        hasHeaderCheckBox = new javax.swing.JCheckBox();
        editColumnExplainLabel = new javax.swing.JLabel();

        descriptionLabel.setText(org.openide.util.NbBundle.getMessage(ImportCSVNodeTableInnerPanel.class, "ImportCSVInnerPanel.descriptionLabel.text")); // NOI18N

        pathTextField.setEditable(false);
        pathTextField.setText(org.openide.util.NbBundle.getMessage(ImportCSVNodeTableInnerPanel.class, "ImportCSVInnerPanel.pathTextField.text")); // NOI18N

        fileButton.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        fileButton.setText(org.openide.util.NbBundle.getMessage(ImportCSVNodeTableInnerPanel.class, "ImportCSVInnerPanel.fileButton.text")); // NOI18N
        fileButton.setMargin(new java.awt.Insets(0, 4, 0, 2));

        labelColumnLabel.setText(org.openide.util.NbBundle.getMessage(ImportCSVNodeTableInnerPanel.class, "ImportCSVInnerPanel.labelColumnLabel.text")); // NOI18N

        previewScroll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        previewScroll.setViewportView(previewTable);

        idColumnLabel.setText(org.openide.util.NbBundle.getMessage(ImportCSVNodeTableInnerPanel.class, "ImportCSVNodeTableInnerPanel.idColumnLabel.text")); // NOI18N

        previewSeparator.setTitle(org.openide.util.NbBundle.getMessage(ImportCSVNodeTableInnerPanel.class, "ImportCSVInnerPanel.previewSeparator.title")); // NOI18N

        skipNodeTableCheckBox.setText(org.openide.util.NbBundle.getMessage(ImportCSVNodeTableInnerPanel.class, "ImportCSVNodeTableInnerPanel.skipNodeTableCheckBox.text")); // NOI18N
        skipNodeTableCheckBox.setFocusPainted(false);

        hasHeaderCheckBox.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        hasHeaderCheckBox.setText(org.openide.util.NbBundle.getMessage(ImportCSVNodeTableInnerPanel.class, "ImportCSVNodeTableInnerPanel.hasHeaderCheckBox.text")); // NOI18N
        hasHeaderCheckBox.setFocusPainted(false);

        editColumnExplainLabel.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        editColumnExplainLabel.setForeground(new java.awt.Color(242, 70, 200));
        editColumnExplainLabel.setText(org.openide.util.NbBundle.getMessage(ImportCSVNodeTableInnerPanel.class, "ImportCSVNodeTableInnerPanel.editColumnExplainLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idColumnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idColumnComboBox, 0, 191, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelColumnLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(labelColumnComboBox, 0, 190, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previewSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previewScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addComponent(descriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileButton)
                .addGap(12, 12, 12))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(254, Short.MAX_VALUE)
                .addComponent(editColumnExplainLabel)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(skipNodeTableCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(hasHeaderCheckBox)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(skipNodeTableCheckBox)
                .addGap(18, 18, 18)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fileButton)
                    .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hasHeaderCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idColumnLabel)
                    .addComponent(labelColumnLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idColumnComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelColumnComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(previewSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editColumnExplainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(previewScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {fileButton, pathTextField});

    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JLabel editColumnExplainLabel;
    private javax.swing.JButton fileButton;
    private javax.swing.JCheckBox hasHeaderCheckBox;
    private javax.swing.JComboBox idColumnComboBox;
    private javax.swing.JLabel idColumnLabel;
    private javax.swing.JComboBox labelColumnComboBox;
    private javax.swing.JLabel labelColumnLabel;
    private javax.swing.JTextField pathTextField;
    private javax.swing.JScrollPane previewScroll;
    private org.jdesktop.swingx.JXTitledSeparator previewSeparator;
    private javax.swing.JTable previewTable;
    private javax.swing.JCheckBox skipNodeTableCheckBox;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void addColumnChooserValidators(ValidationGroup validationGroup) {
    }

    @Override
    protected void refreshColumnChoosers(String... columnNames) {
        idColumnComboBox.removeAllItems();
        labelColumnComboBox.removeAllItems();
        for (String column : columnNames) {
            idColumnComboBox.addItem(column);
            labelColumnComboBox.addItem(column);
        }
        idColumnComboBox.setSelectedItem(columnNames.length > 0 ? columnNames[0] : null);
        labelColumnComboBox.setSelectedItem(columnNames.length > 0 ? columnNames[0] : null);
    }

    @Override
    protected void headerNameChanged(TableColumn col, String oldName, String newName) {
        comboBoxItemChanged(idColumnComboBox, oldName, newName);
        comboBoxItemChanged(labelColumnComboBox, oldName, newName);
    }

    @Override
    protected boolean isValidColumns() {
        return true;
    }

    @Override
    protected void setColumnChoosersEnabled(boolean enabled) {
        idColumnComboBox.setEnabled(enabled);
        labelColumnComboBox.setEnabled(enabled);
    }

    Object getSelectedIdColumn() {
        return idColumnComboBox.getSelectedItem();
    }

    Object getSelectedLabelColumn() {
        return labelColumnComboBox.getSelectedItem();
    }
}
