/*
 * This file is part of MONGKIE. Visit <http://www.mongkie.org/> for details.
 * Visit <http://www.mongkie.org> for details about MONGKIE.
 * Copyright (C) 2012 Korean Bioinformation Center (KOBIC)
 *
 * MONGKIE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MONGKIE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.mongkie.ui.im;

import java.awt.Color;
import org.jdesktop.swingx.JXHyperlink;
import org.mongkie.im.InteractionController;
import org.mongkie.lib.widgets.JSqueezeBoxPanel;
import org.mongkie.ui.visualization.tools.spi.AddonUI;
import org.mongkie.visualization.MongkieDisplay;
import org.openide.util.Lookup;

/**
 *
 * @author Yeongjun Jang <yjjang@kribb.re.kr>
 */
public class InteractionsControlPanel extends AddonUI.ContentPanel {

    private final MongkieDisplay display;

    /**
     * Creates new form InteractionManagerPanel
     */
    public InteractionsControlPanel(MongkieDisplay display) {
        this.display = display;
        initComponents();
        for (String category : Lookup.getDefault().lookup(InteractionController.class).getCategories()) {
            ((JSqueezeBoxPanel) squeezeBox).addPanel(new CategoryPanel(display, category), category);
        }
    }

    @Override
    public void refresh() {
        //TODO: refresh model
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerImg = new javax.swing.JLabel();
        squeezeBox = new JSqueezeBoxPanel();
        linkAllButton = new JXHyperlink();
        unlinkAllButton = new JXHyperlink();

        headerImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mongkie/ui/im/resources/imheader.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(headerImg, org.openide.util.NbBundle.getMessage(InteractionsControlPanel.class, "InteractionsControlPanel.headerImg.text")); // NOI18N

        squeezeBox.setBackground(java.awt.Color.white);
        squeezeBox.setBorder(null);

        linkAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mongkie/ui/im/resources/next.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(linkAllButton, org.openide.util.NbBundle.getMessage(InteractionsControlPanel.class, "InteractionsControlPanel.linkAllButton.text")); // NOI18N
        linkAllButton.setFocusPainted(false);
        linkAllButton.setIconTextGap(0);
        ((JXHyperlink) linkAllButton).setClickedColor(new Color(0, 51, 255));

        unlinkAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mongkie/ui/im/resources/next.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(unlinkAllButton, org.openide.util.NbBundle.getMessage(InteractionsControlPanel.class, "InteractionsControlPanel.unlinkAllButton.text")); // NOI18N
        unlinkAllButton.setFocusPainted(false);
        unlinkAllButton.setIconTextGap(0);
        ((JXHyperlink) unlinkAllButton).setClickedColor(new Color(0, 51, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerImg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(squeezeBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(linkAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unlinkAllButton)
                        .addGap(0, 134, Short.MAX_VALUE)))
                .addGap(4, 4, 4))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerImg, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(squeezeBox, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unlinkAllButton)
                    .addComponent(linkAllButton)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel headerImg;
    private javax.swing.JButton linkAllButton;
    private javax.swing.JPanel squeezeBox;
    private javax.swing.JButton unlinkAllButton;
    // End of variables declaration//GEN-END:variables
}
