/*
 * This file is part of MONGKIE. Visit <http://www.mongkie.org/> for details.
 * Visit <http://www.mongkie.org> for details about MONGKIE.
 * Copyright (C) 2012 Korean Bioinformation Center (KOBIC)
 *
 * MONGKIE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MONGKIE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.mongkie.ui.im;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import kobic.prefuse.display.DisplayListener;
import org.jdesktop.swingx.JXBusyLabel;
import org.jdesktop.swingx.JXHyperlink;
import org.mongkie.im.InteractionController;
import org.mongkie.im.QueryEvent;
import org.mongkie.im.SourceModel;
import org.mongkie.im.SourceModelListener;
import org.mongkie.im.spi.InteractionSource;
import org.mongkie.visualization.MongkieDisplay;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import prefuse.data.Graph;
import prefuse.data.Table;
import prefuse.util.TypeLib;

/**
 *
 * @author Yeongjun Jang <yjjang@kribb.re.kr>
 */
public class SourcePanel extends javax.swing.JPanel implements SourceModelListener, DisplayListener<MongkieDisplay> {

    private final InteractionSource is;
    private final SourceModel model;

    /**
     * Creates new form ProcessPanel
     */
    public SourcePanel(final InteractionSource is) {
        initComponents();
        linking = new JXBusyLabel(
                new Dimension(interactionLinkButton.getPreferredSize().width, interactionLinkButton.getPreferredSize().height));
        linking.setToolTipText("Querying interactions...");
        ((JXHyperlink) interactionNameLink).setText(is.getName());
        this.is = is;
        model = Lookup.getDefault().lookup(InteractionController.class).getModel(is);
        model.addModelListener(SourcePanel.this);
        model.getDisplay().addDisplayListener(SourcePanel.this);
        columnComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                switch (e.getStateChange()) {
                    case ItemEvent.DESELECTED:
                        break;
                    case ItemEvent.SELECTED:
                        Lookup.getDefault().lookup(InteractionController.class).setKeyField(is, (String) e.getItem());
                        break;
                    default:
                        break;
                }
            }
        });
    }
    private JXBusyLabel linking;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        interactionLinkButton = new javax.swing.JButton();
        interactionNameLink = new JXHyperlink();
        keyLabel = new javax.swing.JLabel();
        columnComboBox = new javax.swing.JComboBox();

        setOpaque(false);
        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 8, 3));

        interactionLinkButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        interactionLinkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mongkie/ui/im/resources/uncheck.png"))); // NOI18N
        interactionLinkButton.setText(org.openide.util.NbBundle.getMessage(SourcePanel.class, "SourcePanel.interactionLinkButton.text")); // NOI18N
        interactionLinkButton.setToolTipText(org.openide.util.NbBundle.getMessage(SourcePanel.class, "SourcePanel.interactionLinkButton.toolTipText")); // NOI18N
        interactionLinkButton.setBorderPainted(false);
        interactionLinkButton.setContentAreaFilled(false);
        interactionLinkButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        interactionLinkButton.setFocusPainted(false);
        interactionLinkButton.setPreferredSize(new java.awt.Dimension(18, 18));
        interactionLinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interactionLinkButtonActionPerformed(evt);
            }
        });
        add(interactionLinkButton);

        interactionNameLink.setText(org.openide.util.NbBundle.getMessage(SourcePanel.class, "SourcePanel.interactionNameLink.text")); // NOI18N
        interactionNameLink.setFocusPainted(false);
        interactionNameLink.setPreferredSize(new java.awt.Dimension(100, 24));
        ((JXHyperlink) interactionNameLink).setClickedColor(new Color(0, 51, 255));
        add(interactionNameLink);

        keyLabel.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        keyLabel.setText(org.openide.util.NbBundle.getMessage(SourcePanel.class, "SourcePanel.keyLabel.text")); // NOI18N
        add(keyLabel);

        columnComboBox.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        columnComboBox.setMinimumSize(new java.awt.Dimension(37, 22));
        columnComboBox.setPreferredSize(new java.awt.Dimension(100, 22));
        add(columnComboBox);
    }// </editor-fold>//GEN-END:initComponents

    private void interactionLinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interactionLinkButtonActionPerformed
        if (!model.isLinking()) {
            if (model.isLinked()) {
                Lookup.getDefault().lookup(InteractionController.class).executeUnlink(is);
            } else {
                Lookup.getDefault().lookup(InteractionController.class).executeLink(is);
            }
        }
    }//GEN-LAST:event_interactionLinkButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox columnComboBox;
    private javax.swing.JButton interactionLinkButton;
    private javax.swing.JButton interactionNameLink;
    private javax.swing.JLabel keyLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void processQueryEvent(QueryEvent e) {
        switch (e.getType()) {
            case LINK_STARTED:
                remove(interactionLinkButton);
                linking.setBusy(true);
                add(linking, 0);
                revalidate();
                repaint();
                break;
            case LINK_FINISHED:
                if (model.isLinked()) {
                    interactionLinkButton.setIcon(ImageUtilities.loadImageIcon("org/mongkie/ui/im/resources/check.png", false));
                    interactionLinkButton.setToolTipText(org.openide.util.NbBundle.getMessage(SourcePanel.class, "SourcePanel.interactionLinkButton.linked.toolTipText"));
                } else {
                    interactionLinkButton.setIcon(ImageUtilities.loadImageIcon("org/mongkie/ui/im/resources/uncheck.png", false));
                    interactionLinkButton.setToolTipText(org.openide.util.NbBundle.getMessage(SourcePanel.class, "SourcePanel.interactionLinkButton.toolTipText"));
                }
                remove(linking);
                linking.setBusy(false);
                add(interactionLinkButton, 0);
                revalidate();
                repaint();
                break;
            case UNLINKED:
                interactionLinkButton.setIcon(ImageUtilities.loadImageIcon("org/mongkie/ui/im/resources/uncheck.png", false));
                interactionLinkButton.setToolTipText(org.openide.util.NbBundle.getMessage(SourcePanel.class, "SourcePanel.interactionLinkButton.toolTipText"));
                break;
            case EXPAND_STARTED:
                break;
            case EXPAND_FINISHED:
                break;
            default:
                break;
        }
    }

    @Override
    public void graphDisposing(MongkieDisplay d, Graph g) {
    }

    @Override
    public void graphChanged(MongkieDisplay d, Graph g) {
        columnComboBox.removeAllItems();
        Table t = g.getNodeTable();
        for (int i = 0; i < t.getColumnCount(); i++) {
            if (is.getKeyType().equals(TypeLib.getWrapperType(t.getColumnType(i)))) {
                String col = t.getColumnName(i);
                columnComboBox.addItem(col);
                if (col.equals(g.getNodeKeyField())) {
                    columnComboBox.setSelectedItem(col);
                }
            }
        }
    }
}
