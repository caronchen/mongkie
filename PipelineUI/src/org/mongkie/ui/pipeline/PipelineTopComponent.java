/*
 * This file is part of MONGKIE. Visit <http://www.mongkie.org/> for details.
 * Copyright (C) 2011 Korean Bioinformation Center(KOBIC)
 * 
 * MONGKIE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * MONGKIE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.mongkie.ui.pipeline;

import java.util.logging.Logger;
import javax.swing.ImageIcon;
import org.mongkie.lib.widgets.JSqueezeBoxPanel;
import static org.mongkie.visualization.Config.MODE_CONTEXT;
import static org.mongkie.visualization.Config.ROLE_NETWORK;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * 
 * @author Yeongjun Jang <yjjang@kribb.re.kr>
 */
@ConvertAsProperties(dtd = "-//org.mongkie.ui.pipeline//Pipeline//EN",
autostore = false)
@TopComponent.Description(preferredID = PipelineTopComponent.PREFERRED_ID,
iconBase = "org/mongkie/ui/pipeline/resources/pipeline.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = MODE_CONTEXT, openAtStartup = false, roles = ROLE_NETWORK, position = 300)
public final class PipelineTopComponent extends TopComponent {

    private static PipelineTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String PREFERRED_ID = "PipelineTopComponent";

    public PipelineTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(PipelineTopComponent.class, "CTL_PipelineTopComponent"));
        setToolTipText(NbBundle.getMessage(PipelineTopComponent.class, "HINT_PipelineTopComponent"));
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

//        MigLayout migLayout = new MigLayout("insets 0", "[grow,fill]", "[pref!]");
//        JPanel innerPanel = new JPanel(migLayout);

        ProcessPanel pp = new ProcessPanel("Import gene list");
        pp.addPipelineAction(new PipelineAction("Import gene list", new ImageIcon(getClass().getResource("/org/mongkie/ui/pipeline/resources/pipeline.png")), ""));
        ((JSqueezeBoxPanel) squeezeBoxPanel).addPanel(pp, pp.getTitle());
        pp = new ProcessPanel("Upload or select PPI network");
        pp.addPipelineAction(new PipelineAction("Upload PPI network", new ImageIcon(getClass().getResource("/org/mongkie/ui/pipeline/resources/pipeline.png")), ""));
        pp.addPipelineAction(new PipelineAction("Select PPI network", new ImageIcon(getClass().getResource("/org/mongkie/ui/pipeline/resources/pipeline.png")), ""));
        ((JSqueezeBoxPanel) squeezeBoxPanel).addPanel(pp, pp.getTitle());
        pp = new ProcessPanel("Expression overlay");
        pp.addPipelineAction(new PipelineAction("Overlay expression profiles", new ImageIcon(getClass().getResource("/org/mongkie/ui/pipeline/resources/pipeline.png")), ""));
        ((JSqueezeBoxPanel) squeezeBoxPanel).addPanel(pp, pp.getTitle());
        pp = new ProcessPanel("Network clustering");
        pp.addPipelineAction(new PipelineAction("Clusterize network", new ImageIcon(getClass().getResource("/org/mongkie/ui/pipeline/resources/pipeline.png")), ""));
        ((JSqueezeBoxPanel) squeezeBoxPanel).addPanel(pp, pp.getTitle());
        pp = new ProcessPanel("Export network");
        pp.addPipelineAction(new PipelineAction("Export CSV", new ImageIcon(getClass().getResource("/org/mongkie/ui/pipeline/resources/pipeline.png")), ""));
        pp.addPipelineAction(new PipelineAction("Export XML", new ImageIcon(getClass().getResource("/org/mongkie/ui/pipeline/resources/pipeline.png")), ""));
        ((JSqueezeBoxPanel) squeezeBoxPanel).addPanel(pp, pp.getTitle());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        squeezeBoxPanel = new JSqueezeBoxPanel();
        chooserPanel = new javax.swing.JPanel();
        pipelineComboBox = new javax.swing.JComboBox();
        wizardButtion = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        squeezeBoxPanel.setBorder(null);
        add(squeezeBoxPanel, java.awt.BorderLayout.CENTER);

        chooserPanel.setOpaque(false);
        chooserPanel.setLayout(new java.awt.GridBagLayout());

        pipelineComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple network analysis" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 2, 0);
        chooserPanel.add(pipelineComboBox, gridBagConstraints);

        wizardButtion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mongkie/ui/pipeline/resources/wand.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(wizardButtion, org.openide.util.NbBundle.getMessage(PipelineTopComponent.class, "PipelineTopComponent.wizardButtion.text")); // NOI18N
        wizardButtion.setToolTipText(org.openide.util.NbBundle.getMessage(PipelineTopComponent.class, "PipelineTopComponent.wizardButtion.toolTipText")); // NOI18N
        wizardButtion.setFocusPainted(false);
        wizardButtion.setMargin(new java.awt.Insets(2, 2, 2, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 2, 2);
        chooserPanel.add(wizardButtion, gridBagConstraints);

        add(chooserPanel, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chooserPanel;
    private javax.swing.JComboBox pipelineComboBox;
    private javax.swing.JPanel squeezeBoxPanel;
    private javax.swing.JButton wizardButtion;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized PipelineTopComponent getDefault() {
        if (instance == null) {
            instance = new PipelineTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the PipelineTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized PipelineTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(PipelineTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof PipelineTopComponent) {
            return (PipelineTopComponent) win;
        }
        Logger.getLogger(PipelineTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
