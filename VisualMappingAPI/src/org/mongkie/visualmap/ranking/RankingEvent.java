/*
 * This file is part of MONGKIE. Visit <http://www.mongkie.org/> for details.
 * Copyright (C) 2011 Korean Bioinformation Center(KOBIC)
 * 
 * MONGKIE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * MONGKIE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.mongkie.visualmap.ranking;

import org.mongkie.visualmap.spi.ranking.Transformer;
import org.mongkie.visualmap.spi.ranking.Ranking;

/**
 * Event generated by the {@link RankingModel} and sent to listeners registered
 * by the model.
 * 
 * @see RankingModelListener
 * @author Mathieu Bastian
 * @author Yeongjun Jang <yjjang@kribb.re.kr>
 */
public interface RankingEvent {

    /**
     * The types of events
     */
    public enum Type {

        /**
         * The list of available ranking has been updated. The listeners can
         * call <code>RankingModel.getRankings()</code> to get the newly created rankings.
         */
        REFRESH_RANKING,
        CURRENT_RANKING,
        CURRENT_TRANSFORMER,
        CURRENT_ELEMENT_TYPE,
        RANKING_LIST_VISIBLE,
        BARCHART_VISIBLE,
        /**
         * A transformer has just been applied. The listeners
         * can retried the transformer and ranking directly from the event.
         */
        APPLY_TRANSFORMER,
        /**
         * A auto transformer has just been started.
         */
        START_AUTO_TRANSFORM,
        /**
         * A auto transformer has just been stopped.
         */
        STOP_AUTO_TRANSFORM,
    };

    /**
     * Returns the type of event.
     * @return the type of this event
     */
    public Type getType();

    /**
     * Returns the ranking model that generated the event.
     * @return the source of the event
     */
    public RankingModel getSource();

    /**
     * Returns the ranking associated to the event, or <code>null</code>.
     * @return the ranking associated to the event or <code>null</code>
     */
    public Ranking getRanking();

    /**
     * Returns the transformer associated to the event, or <code>null</code>.
     * @return the ranking associated to the event or <code>null</code> 
     */
    public Transformer getTransformer();

    public Object getOldValue();

    public Object getNewValue();

    /**
     * Returns <code>true</code> if this event is one of these in parameters.
     * @param type  the event types that are to be compared with this event
     * @return      <code>true</code> if this event is <code>type</code>,
     *              <code>false</code> otherwise
     */
    public boolean is(Type... type);
}
