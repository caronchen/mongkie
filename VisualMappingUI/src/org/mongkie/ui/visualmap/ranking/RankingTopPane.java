/*
 * This file is part of MONGKIE. Visit <http://www.mongkie.org/> for details.
 * Copyright (C) 2011 Korean Bioinformation Center(KOBIC)
 * 
 * MONGKIE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * MONGKIE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * RankingTopPane.java
 *
 * Created on Sep 16, 2011, 9:56:25 AM
 */
package org.mongkie.ui.visualmap.ranking;

import javax.swing.JPanel;
import org.mongkie.visualization.workspace.ModelChangeListener;
import org.mongkie.visualmap.ranking.RankingController;
import org.mongkie.visualmap.ranking.RankingEvent;
import org.mongkie.visualmap.ranking.RankingModel;
import org.mongkie.visualmap.ranking.RankingModelListener;
import org.mongkie.visualmap.spi.VisualMapTopPaneUI;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;
import static org.mongkie.visualmap.ranking.RankingEvent.Type.*;

/**
 *
 * @author Yeongjun Jang <yjjang@kribb.re.kr>
 */
@ServiceProvider(service = VisualMapTopPaneUI.class, position = 100)
public class RankingTopPane extends JPanel implements VisualMapTopPaneUI, RankingModelListener {

    private transient RankingController controller;
    private transient RankingModel model;

    /** Creates new form RankingTopPane */
    public RankingTopPane() {
        controller = Lookup.getDefault().lookup(RankingController.class);
        controller.addModelChangeListener(new ModelChangeListener<RankingModel>() {

            @Override
            public void modelChanged(RankingModel o, RankingModel n) {
                if (o != null) {
                    o.removeModelListener(RankingTopPane.this);
                }
                model = n;
                if (model != null) {
                    model.addModelListener(RankingTopPane.this);
                }
                refreshModel();
            }
        });

        initComponents();
        resultTablePanel.setVisible(false);
    }

    @Override
    public String getDisplayName() {
        return "Continuous";
    }

    @Override
    public String getShortDescription() {
        return "Coninuous visual mapping";
    }

    @Override
    public JPanel getPanel() {
        return this;
    }

    @Override
    public void processRankingEvent(RankingEvent e) {
        if (e.is(RANKING_LIST_VISIBLE)) {
            showRankingListButton.setSelected((Boolean) e.getNewValue());
            if (resultTablePanel.isVisible() != model.isRankingListVisible()) {
                resultTablePanel.setVisible(model.isRankingListVisible());
                revalidate();
                repaint();
            }
        }
    }

    private void refreshModel() {
        boolean enabled = model != null;
        rankingChooser.setEnabled(enabled);
        rankingToolbar.setEnabled(enabled);
        ((RankingChooser) rankingChooser).refreshModel(model);
        ((RankingToolbar) rankingToolbar).refreshModel(model);
        showRankingListButton.setEnabled(enabled);
        ((RankingResultView) resultTableScrollPane).unselect();
        if (model != null) {
            ((RankingResultView) resultTableScrollPane).select(model);
            if (resultTablePanel.isVisible() != model.isRankingListVisible()) {
                resultTablePanel.setVisible(model.isRankingListVisible());
                revalidate();
                repaint();
            }
            showRankingListButton.setSelected(model.isRankingListVisible());
        } else {
            resultTablePanel.setVisible(false);
            showRankingListButton.setSelected(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        rankingToolbar = new RankingToolbar(controller);
        resultTablePanel = new javax.swing.JPanel();
        resultTableScrollPane = new RankingResultView();
        rankingActionbar = new javax.swing.JToolBar();
        showRankingListButton = new javax.swing.JToggleButton();
        rankingChooser = new RankingChooser(controller);

        setLayout(new java.awt.GridBagLayout());

        rankingToolbar.setFloatable(false);
        rankingToolbar.setRollover(true);
        rankingToolbar.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(rankingToolbar, gridBagConstraints);

        resultTablePanel.setOpaque(false);
        resultTablePanel.setLayout(new java.awt.GridLayout(1, 0));

        resultTableScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        resultTablePanel.add(resultTableScrollPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 1, 4);
        add(resultTablePanel, gridBagConstraints);

        rankingActionbar.setFloatable(false);
        rankingActionbar.setRollover(true);
        rankingActionbar.setOpaque(false);

        showRankingListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mongkie/ui/visualmap/resources/sort_descending.png"))); // NOI18N
        showRankingListButton.setText(org.openide.util.NbBundle.getMessage(RankingTopPane.class, "RankingTopPane.showRankingListButton.text")); // NOI18N
        showRankingListButton.setToolTipText(org.openide.util.NbBundle.getMessage(RankingTopPane.class, "RankingTopPane.showRankingListButton.toolTipText")); // NOI18N
        showRankingListButton.setEnabled(false);
        showRankingListButton.setFocusable(false);
        showRankingListButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showRankingListButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showRankingListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showRankingListButtonActionPerformed(evt);
            }
        });
        rankingActionbar.add(showRankingListButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.weightx = 1.0;
        add(rankingActionbar, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        add(rankingChooser, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void showRankingListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showRankingListButtonActionPerformed
    controller.setRankingListVisible(showRankingListButton.isSelected());
}//GEN-LAST:event_showRankingListButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar rankingActionbar;
    private javax.swing.JPanel rankingChooser;
    private javax.swing.JToolBar rankingToolbar;
    private javax.swing.JPanel resultTablePanel;
    private javax.swing.JScrollPane resultTableScrollPane;
    private javax.swing.JToggleButton showRankingListButton;
    // End of variables declaration//GEN-END:variables
}
